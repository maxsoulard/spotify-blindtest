# Blindtest types
type Query {
  users: [User!]
  user(id: ID!): User
  userByName(name: String!): User
  gamesHistory(id: ID!): [GameHistory!]
  track(id: ID!): Track
  artist(id: ID!): Artist
}

type Mutation {
  createUser(name: String!): User
  updateUserScore(userId: ID!, score: Int!): User
  addGameToHistory(userId: ID!, score: Int!): GameHistory
}

type User {
  id: ID!
  name: String
  score: Int
  gamesCount: Int
  gamesHistory: [GameHistory!]
}

type GameHistory {
  id: ID!
  score: Int
  date: Date
  user: User
}

# Spotify types
type Track {
  id: ID!
  name: String
  artist: Artist
}

type Artist {
  id: ID!
  name: String
}

# Scalar
scalar Date
