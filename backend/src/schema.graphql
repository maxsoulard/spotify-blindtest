# Blindtest types
type Query {
  users: [User!]
  user(id: ID!): User
  userByName(name: String!): User
  gamesHistory(id: ID!): [GameHistory!]
  game(id: ID!): Game
}

type Mutation {
  createUser(name: String!): User
  updateUserScore(userId: ID!, score: Int!): User
  addGameToHistory(userId: ID!, score: Int!): GameHistory
  startNewGame(userId: ID!): Game
}

type User {
  id: ID!
  name: String
  score: Int
  gamesCount: Int
  gamesHistory: [GameHistory!]
}

type GameHistory {
  id: ID!
  score: Int
  date: Date
  user: User
}

type Game {
  id: ID!
  tracks: [SpotifyTrack!]
  user(userId: ID!): User
}

# Spotify types
type SpotifyTrack {
  id: ID!
  name: String
  artist: Artist
}

type Artist {
  id: ID!
  name: String
}

# Scalar
scalar Date
